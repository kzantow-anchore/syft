name: "Release"
on:
  push:
    # take no actions on push to any branch...
    branches-ignore:
      - "**"
    # ... only act on release tags
    tags:
      - "v*"

env:
  GO_VERSION: "1.16.x"

jobs:

  release:
    needs: [quality-gate]
    runs-on: macos-latest # Due to our code signing process, it's vital that we run our release steps on macOS.
    steps:

# we are having an infinite loop of installing docker https://github.com/anchore/syft/actions/runs/1199137004
# we are still looking for a fix

#      - uses: docker-practice/actions-setup-docker@v1
#
#      # note, it is important to always be auth'd into docker.io to prevent rate limiting issues
#      - name: Login to Docker Hub
#        run: echo ${{ secrets.TOOLBOX_DOCKER_PASS }} | docker login docker.io -u ${{ secrets.TOOLBOX_DOCKER_USER }} --password-stdin

      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Restore tool cache
        id: tool-cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ github.workspace }}/.tmp
          key: ${{ runner.os }}-tool-${{ hashFiles('Makefile') }}

      - name: Restore go cache
        id: go-cache
        uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: (cache-miss) Bootstrap all project dependencies
        if: steps.tool-cache.outputs.cache-hit != 'true' || steps.go-cache.outputs.cache-hit != 'true'
        run: make bootstrap

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        env:
          GPG_PRIVATE_KEY: ${{ secrets.SIGNING_GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.SIGNING_GPG_PASSPHRASE }}

      - name: GPG signing info
        run: |
          echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
          echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
          echo "name:        ${{ steps.import_gpg.outputs.name }}"
          echo "email:       ${{ steps.import_gpg.outputs.email }}"

      - uses: kzantow-anchore/sbom-action@find-draft-releases
        with:
          artifact-name: sbom.spdx.json

      - name: Build & publish release artifacts
        run: make release
        env:
          DOCKER_USERNAME: ${{ secrets.TOOLBOX_DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.TOOLBOX_DOCKER_PASS }}
          GITHUB_TOKEN: ${{ secrets.ANCHORE_GIT_READ_TOKEN }}
          GPG_PRIVATE_KEY: ${{ secrets.SIGNING_GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.SIGNING_GPG_PASSPHRASE }}
          SIGNING_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLBOX_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLBOX_AWS_SECRET_ACCESS_KEY }}
          APPLE_DEVELOPER_ID_CERT: ${{ secrets.APPLE_DEVELOPER_ID_CERT }} # Used during macOS code signing.
          APPLE_DEVELOPER_ID_CERT_PASS: ${{ secrets.APPLE_DEVELOPER_ID_CERT_PASS }} # Used during macOS code signing.
          AC_USERNAME: ${{ secrets.ENG_CI_APPLE_ID }} # Used during macOS notarization.
          AC_PASSWORD: ${{ secrets.ENG_CI_APPLE_ID_PASS }} # Used during macOS notarization.


      - uses: kzantow-anchore/sbom-action/publish-sbom@find-draft-releases

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,workflow,action,eventName
          text: "A new Syft release is ready to be manually published: https://github.com/anchore/syft/releases"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_TOOLBOX_WEBHOOK_URL }}
        if: ${{ success() }}

      - uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: dist/**/*
